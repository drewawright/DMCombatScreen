@model DMCombatScreen.Models.AttendanceAddCharacter

@{
    ViewBag.Title = "CreateMultiple";
}

<h2>Add Characters To An Encounter</h2>

@using (Html.BeginForm("CreateMultiple", "Attendance", FormMethod.Get, new { id = Model.CombatID }))
{
    <div class="form-group form-inline">
        <p>
            Filter Characters By Category: @Html.DropDownList("CharType", null, "All", new { @class = "form-control" })
            <input type="submit" value="Filter" class="btn btn-danger form-control" />
        </p>
    </div>
}

@using (Html.BeginForm("CreateMultiple", "Attendance", FormMethod.Post, new { id = Model.CombatID }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr class="redline" />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.CombatName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CombatID", null, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CombatName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <h3 style="font-weight: 600;">Select Characters to Add</h3>
                <table class="table table-responsive table-hover" id="checkbox-container">
                    <tr>
                        <th></th>
                        <th>
                            @Html.ActionLink("Character Name", "CreateMultiple", new { sortOrder = ViewBag.NameSortParam })
                            <span class="glyphicon glyphicon-sort" aria-hidden="true"></span>
                        </th>

                        <th>
                            @Html.ActionLink("Character Type", "CreateMultiple", new { sortOrder = ViewBag.TypeSortParam })
                            <span class="glyphicon glyphicon-sort" aria-hidden="true"></span>
                        </th>
                        <th>Number to add</th>
                    </tr>

                    @{
                        for (int i = 0; i < Model.CharacterList.Count(); i++)
                        {
                            @Html.HiddenFor(m => Model.CharacterList[i].CharacterID)
                            @Html.HiddenFor(m => Model.CharacterList[i].CharacterName)
                            @Html.HiddenFor(m => Model.CharacterList[i].CharacterTypeValue)
                            <tr>
                                <td>
                                    @Html.CheckBoxFor(m => Model.CharacterList[i].IsChecked, htmlAttributes: new { @class = Model.CharacterList[i].CharacterID })
                                </td>
                                <td>
                                    @Html.LabelFor(m => Model.CharacterList[i].IsChecked, Model.CharacterList[i].CharacterName)
                                </td>
                                <td>
                                    @Html.DisplayFor(m => Model.CharacterList[i].CharacterTypeName)
                                </td>
                                <td>
                                    @Html.EditorFor(m => Model.CharacterList[i].NumberOfAttendances, new { htmlAttributes = new { @class = Model.CharacterList[i].CharacterID + "n" } })
                                </td>
                            </tr>
                        }
                    }
                </table>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <input type="submit" value="Create" class="btn btn-danger btn-lg" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", null, new { @class = "table-links" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        var checkboxValues = JSON.parse(localStorage.getItem('checkboxValues')) || {},
            $checkboxes = $("#checkbox-container :checkbox");

        $checkboxes.on("change", function () {
            $checkboxes.each(function () {
                checkboxValues[this.className] = this.checked;
            });

            localStorage.setItem("checkboxValues", JSON.stringify(checkboxValues));
        });

        // On page load
        $.each(checkboxValues, function (key, value) {
            $("." + key).prop('checked', value);
        });
    </script>
    <script>
        var numberValues = JSON.parse(localStorage.getItem('numberValues')) || {},
            $numbers = $("#checkbox-container :input[type=number]");

        $numbers.on("change", function () {
            $numbers.each(function () {
                numberValues[this.className] = this.value;
            });

            localStorage.setItem("numberValues", JSON.stringify(numberValues));
        });

        // On page load
        $.each(numberValues, function (key, value) {
            $("." + key).attr('value', value);
        });
    </script>
    <script>
        $(document).ready(function () {
            $("input").removeClass("text-box single-line")
        })
    </script>
}
